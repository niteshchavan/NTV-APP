package com.nitesh.exoplayer;


import android.os.Bundle;
import android.util.Log;
import android.view.WindowManager;

import androidx.annotation.OptIn;
import androidx.appcompat.app.AppCompatActivity;
import androidx.media3.common.MediaItem;
import androidx.media3.common.PlaybackException;
import androidx.media3.common.Player;
import androidx.media3.common.util.UnstableApi;
import androidx.media3.datasource.DataSource;
import androidx.media3.datasource.DefaultHttpDataSource;
import androidx.media3.exoplayer.DefaultLoadControl;
import androidx.media3.exoplayer.ExoPlayer;
import androidx.media3.exoplayer.LoadControl;
import androidx.media3.exoplayer.source.DefaultMediaSourceFactory;
import androidx.media3.exoplayer.upstream.DefaultAllocator;
import androidx.media3.ui.PlayerView;
import androidx.media3.exoplayer.source.MediaSource;

public class MainActivity extends AppCompatActivity {

    private ExoPlayer player;
    private static final String STREAM_URL = "http://filex.tv:8080/shakeelmirza/4110440/75";
    private MediaSource mediaSource;
    private static final String TAG = "MyCatcher";

    @OptIn(markerClass = UnstableApi.class)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        PlayerView playerView = findViewById(R.id.player_view);
        DataSource.Factory dataSourceFactory = new DefaultHttpDataSource.Factory();


        DefaultLoadControl loadControl = new DefaultLoadControl.Builder()
                .setBufferDurationsMs(
                        60 * 1000, // Min buffer size before playback starts (1 minute)
                        5 * 60 * 1000, // Max buffer size (5 minutes)
                        60 * 1000, // Min buffer size to keep during playback (1 minute)
                        60 * 1000 // Max buffer size to keep during playback (5 minutes)
                )
                .setTargetBufferBytes(-1) // Default value, not overriding
                .setPrioritizeTimeOverSizeThresholds(false) // Default value, not overriding
                .build();


        player = new ExoPlayer.Builder(this)
                .setLoadControl(loadControl)
                .build();
        playerView.setPlayer(player);

        MediaItem mediaItem = new MediaItem.Builder()
                .setUri(STREAM_URL)
                .build();
        mediaSource = new DefaultMediaSourceFactory(dataSourceFactory)
                .createMediaSource(mediaItem);
        player.setMediaSource(mediaSource);
        player.prepare();
        player.setPlayWhenReady(true);
        // Add a listener to handle playback state changes and errors
        player.addListener(new Player.Listener() {
            @Override
            public void onPlaybackStateChanged(int playbackState) {
                if (playbackState == Player.STATE_IDLE || playbackState == Player.STATE_ENDED) {
                    Log.d(TAG, "Playback state changed: " + playbackState + ". Restarting player.");
                    //schedulePlayerRetry();
                }
            }

            @Override
            public void onPlayerError(PlaybackException error) {
                Log.e(TAG, "Playback error: " + error.getMessage());
                //schedulePlayerRetry();
            }
        });
    }

}